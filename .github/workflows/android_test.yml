name: testing

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
      - '**.md'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
      - '**.md'

env:
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'temurin'
  GRADLE_CACHE: 'gradle'

  ANDROID_PROFILE: Nexus 6
  ANDROID_TARGET: google_apis
  ANDROID_API_LEVEL: 29
  ANDROID_ARCH: x86_64

permissions:
  contents: read

jobs:
  detekt_checks:
    name: Detekt Checks
    permissions:
      contents: read
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      - name: Get local.properties from secrets
        run: echo "${{secrets.LOCAL_PROPERTIES }}" > $GITHUB_WORKSPACE/local.properties

      - name: Copy CI gradle.properties
        run: mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties

      - name: Set up JDK 21 (with cache)
        if: github.actor != 'renovate[bot]'
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: ${{ env.GRADLE_CACHE }}

      - name: Set up JDK 21 (without cache)
        if: github.actor == 'renovate[bot]'
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}


      - name: Google Service
        env:
          DATA: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: |
          cat /home/runner/work/BAZZ-Movies/BAZZ-Movies/app/google-services.json | base64
          echo $DATA > /home/runner/work/BAZZ-Movies/BAZZ-Movies/app/google-services.json

      - name: Run Detekt
        run: ./gradlew detekt

  unit_test:
    name: Unit Tests
    needs: detekt_checks
    runs-on: ubuntu-latest
    timeout-minutes: 30
    continue-on-error: true
    permissions:
      contents: read
      actions: write # Needed for cache and artifact upload
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      - name: Copy CI gradle.properties
        run: mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties

      - name: Get local.properties from secrets
        run: echo "${{secrets.LOCAL_PROPERTIES }}" > $GITHUB_WORKSPACE/local.properties

      - name: Set up JDK 21 (with cache)
        if: github.actor != 'renovate[bot]'
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: ${{ env.GRADLE_CACHE }}

      - name: Set up JDK 21 (without cache)
        if: github.actor == 'renovate[bot]'
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      # skip cache operations for Renovate PRs
      - name: Cache Gradle dependencies
        if: github.actor != 'renovate[bot]'
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android/build-cache
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Google Service
        env:
          DATA: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: |
          cat /home/runner/work/BAZZ-Movies/BAZZ-Movies/app/google-services.json | base64
          echo $DATA > /home/runner/work/BAZZ-Movies/BAZZ-Movies/app/google-services.json

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            **/build/
            !**/build/outputs/
            !**/build/reports/
          key: build-cache-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/src/**/*.kt', '**/src/**/*.java') }}
          restore-keys: |
            build-cache-${{ runner.os }}-

      - name: Run debug unit tests
        run: |
          ./gradlew testDebugUnitTest --stacktrace

      # Cache unit test results for the coverage job
      - name: Cache unit test results
        uses: actions/cache/save@v4
        if: always() # Save cache even if tests fail
        with:
          path: |
            ${{ github.workspace }}/**/build/outputs/unit_test_code_coverage/
            ${{ github.workspace }}/**/build/reports/tests/testDebugUnitTest/
            ${{ github.workspace }}/**/build/test-results/testDebugUnitTest/
            ${{ github.workspace }}/**/build/tmp/kotlin-classes/
          key: unit-test-results-${{ github.run_id }}

      - name: Upload Unit Test Reports (if needed)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-report
          path: '**/build/reports/tests/testDebugUnitTest/'

  instrumentation_test:
    name: Instrumentation Tests
    needs: detekt_checks
    runs-on: ubuntu-latest
    timeout-minutes: 30
    continue-on-error: true
    permissions:
      contents: read
      actions: write # Needed for cache and artifact upload
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      - name: Copy CI gradle.properties
        run: mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties

      - name: Get local.properties from secrets
        run: echo "${{secrets.LOCAL_PROPERTIES }}" > $GITHUB_WORKSPACE/local.properties

      - name: Google Service
        env:
          DATA: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: |
          cat /home/runner/work/BAZZ-Movies/BAZZ-Movies/app/google-services.json | base64
          echo $DATA > /home/runner/work/BAZZ-Movies/BAZZ-Movies/app/google-services.json

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Set up JDK 21 (with cache)
        if: github.actor != 'renovate[bot]'
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: ${{ env.GRADLE_CACHE }}

      - name: Set up JDK 21 (without cache)
        if: github.actor == 'renovate[bot]'
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@b65944464e3d6ea5b462dd9ca3e388e7f377b284

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-29

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@1dcd0090116d15e7c562f8db72807de5e036a4ed
        with:
          api-level: ${{ env.ANDROID_API_LEVEL }}
          force-avd-creation: false
          arch: ${{ env.ANDROID_ARCH }}
          profile: ${{ env.ANDROID_PROFILE }}
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      # https://github.com/ReactiveCircus/android-emulator-runner/commit/1dcd0090116d15e7c562f8db72807de5e036a4ed
      # v2.34.0
      - name: Run instrumentation test
        uses: reactivecircus/android-emulator-runner@1dcd0090116d15e7c562f8db72807de5e036a4ed
        with:
          api-level: ${{ env.ANDROID_API_LEVEL }}
          force-avd-creation: false
          arch: ${{ env.ANDROID_ARCH }}
          profile: ${{ env.ANDROID_PROFILE }}
          disable-animations: true
          script: |
            adb wait-for-device
            ./gradlew :feature:about:connectedDebugAndroidTest --stacktrace --continue
            ./gradlew :feature:detail:connectedDebugAndroidTest --stacktrace --continue
            ./gradlew :feature:login:connectedDebugAndroidTest --stacktrace --continue
            ./gradlew :feature:more:connectedDebugAndroidTest --stacktrace --continue
            ./gradlew :feature:person:connectedDebugAndroidTest --stacktrace --continue
            ./gradlew :feature:search:connectedDebugAndroidTest --stacktrace && killall -INT crashpad_handler || true

      # Cache instrumentation test results for the coverage job
      - name: Cache instrumentation test results
        uses: actions/cache/save@v4
        if: always() # Save cache even if tests fail
        with:
          path: |
            ${{ github.workspace }}/**/build/outputs/androidTest-results/
            ${{ github.workspace }}/**/build/outputs/code_coverage/
            ${{ github.workspace }}/**/build/reports/androidTests/
            ${{ github.workspace }}/**/build/test-results/connectedDebugAndroidTest/
            ${{ github.workspace }}/**/build/tmp/kotlin-classes/debug/
            ${{ github.workspace }}/**/build/tmp/kotlin-classes/debugAndroidTest/
          key: instrumentation-test-results-${{ github.run_id }}

      - name: Upload Instrumentation Test Reports (if needed)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: instrumentation-test-report
          path: '**/build/reports/androidTests/connected/'

  test_coverage:
    name: Test Coverage Report
    needs: [unit_test, instrumentation_test]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    continue-on-error: true
    permissions:
      contents: read
      actions: write # Needed for cache and artifact upload
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      - name: Copy CI gradle.properties
        run: mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties

      - name: Get local.properties from secrets
        run: echo "${{secrets.LOCAL_PROPERTIES }}" > $GITHUB_WORKSPACE/local.properties

      - name: Google Service
        env:
          DATA: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: |
          cat /home/runner/work/BAZZ-Movies/BAZZ-Movies/app/google-services.json | base64
          echo $DATA > /home/runner/work/BAZZ-Movies/BAZZ-Movies/app/google-services.json

      - name: Set up JDK 21 (with cache)
        if: github.actor != 'renovate[bot]'
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: ${{ env.GRADLE_CACHE }}

      - name: Set up JDK 21 (without cache)
        if: github.actor == 'renovate[bot]'
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      # Restore cached unit test results
      - name: Restore unit test results
        id: cache_restore_unit
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ github.workspace }}/**/build/outputs/unit_test_code_coverage/
            ${{ github.workspace }}/**/build/reports/tests/testDebugUnitTest/
            ${{ github.workspace }}/**/build/test-results/testDebugUnitTest/
            ${{ github.workspace }}/**/build/tmp/kotlin-classes/
          key: unit-test-results-${{ github.run_id }}

      # Restore cached instrumentation test results
      - name: Restore instrumentation test results
        id: cache_restore_instrumentation
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ github.workspace }}/**/build/outputs/androidTest-results/
            ${{ github.workspace }}/**/build/outputs/code_coverage/
            ${{ github.workspace }}/**/build/reports/androidTests/
            ${{ github.workspace }}/**/build/test-results/connectedDebugAndroidTest/
            ${{ github.workspace }}/**/build/tmp/kotlin-classes/debug/
            ${{ github.workspace }}/**/build/tmp/kotlin-classes/debugAndroidTest/
          key: instrumentation-test-results-${{ github.run_id }}

      # Fallback: run unit tests if cache missed
      - name: Run debug unit tests (fallback)
        if: steps.cache_restore_unit.outputs.cache-hit != 'true'
        run: ./gradlew testDebugUnitTest --stacktrace

      # Fallback: run instrumentation tests if cache missed
      - name: Enable KVM (fallback)
        if: steps.cache_restore_instrumentation.outputs.cache-hit != 'true'
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Run debug instrumentation test (fallback)
        if: steps.cache_restore_instrumentation.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@1dcd0090116d15e7c562f8db72807de5e036a4ed
        with:
          api-level: ${{ env.ANDROID_API_LEVEL }}
          arch: ${{ env.ANDROID_ARCH }}
          profile: ${{ env.ANDROID_PROFILE }}
          disable-animations: true
          script: |
            ./gradlew :feature:about:connectedDebugAndroidTest --stacktrace --continue
            ./gradlew :feature:detail:connectedDebugAndroidTest --stacktrace --continue
            ./gradlew :feature:login:connectedDebugAndroidTest --stacktrace --continue
            ./gradlew :feature:more:connectedDebugAndroidTest --stacktrace --continue
            ./gradlew :feature:person:connectedDebugAndroidTest --stacktrace --continue
            ./gradlew :feature:search:connectedDebugAndroidTest --stacktrace && killall -INT crashpad_handler || true

      - name: Check cached test results
        run: |
          echo "=== Checking Unit Test Results ==="
          find . -name "testDebugUnitTest.exec" -type f || echo "No unit test .exec files found"
          find . -path "*/build/test-results/testDebugUnitTest" -type d || echo "No unit test results found"
          
          echo "=== Checking Instrumentation Test Results ==="
          find . -name "connectedDebugAndroidTest.exec" -type f || echo "No instrumentation test .exec files found"
          find . -path "*/build/test-results/connectedDebugAndroidTest" -type d || echo "No instrumentation test results found"

      - name: Generate JaCoCo Combined Coverage Report
        run: |
          echo "Generating combined coverage report..."
          ./gradlew createDebugCombinedCoverageReport --stacktrace
          
          echo "=== Checking Generated Reports ==="
          find . -name "createDebugCombinedCoverageReport.xml" -type f || echo "No combined coverage report found"
          find . -path "*/build/reports/jacoco" -type d || echo "No jacoco reports directory found"

      # Check if coverage report exists before uploading
      - name: Check coverage report exists
        id: check_coverage
        run: |
          if find . -name "createDebugCombinedCoverageReport.xml" -type f | grep -q .; then
            echo "coverage_exists=true" >> $GITHUB_OUTPUT
            echo "✅ Coverage report found"
            find . -name "createDebugCombinedCoverageReport.xml" -type f
          else
            echo "coverage_exists=false" >> $GITHUB_OUTPUT
            echo "❌ Coverage report not found"
          fi

      # https://github.com/codecov/codecov-action/commit/0565863a31f2c772f9f0395002a31e3f06189574
      # v5.4.0
      # Upload the same combined report with different flags for each module
      - name: Upload coverage with app flag
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          flags: app
          token: ${{ secrets.CODECOV_TOKEN }}
          name: app-coverage
        continue-on-error: true

      - name: Upload coverage with core-common flag
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          flags: core-common
          token: ${{ secrets.CODECOV_TOKEN }}
          name: core-common-coverage
        continue-on-error: true

      - name: Upload coverage with core-coroutines flag
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          flags: core-coroutines
          token: ${{ secrets.CODECOV_TOKEN }}
          name: core-coroutines-coverage
        continue-on-error: true

      - name: Upload coverage with core-data flag
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          flags: core-data
          token: ${{ secrets.CODECOV_TOKEN }}
          name: core-data-coverage
        continue-on-error: true

      - name: Upload coverage with core-database flag
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          flags: core-database
          token: ${{ secrets.CODECOV_TOKEN }}
          name: core-database-coverage
        continue-on-error: true

      - name: Upload coverage with core-designsystem flag
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          flags: core-designsystem
          token: ${{ secrets.CODECOV_TOKEN }}
          name: core-designsystem-coverage
        continue-on-error: true

      - name: Upload coverage with core-domain flag
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          flags: core-domain
          token: ${{ secrets.CODECOV_TOKEN }}
          name: core-domain-coverage
        continue-on-error: true

      - name: Upload coverage with core-favoritewatchlist flag
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          flags: core-favoritewatchlist
          token: ${{ secrets.CODECOV_TOKEN }}
          name: core-favoritewatchlist-coverage
        continue-on-error: true

      - name: Upload coverage with core-instrumentationtest flag
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          flags: core-instrumentationtest
          token: ${{ secrets.CODECOV_TOKEN }}
          name: core-instrumentationtest-coverage
        continue-on-error: true

      - name: Upload coverage with core-mappers flag
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          flags: core-mappers
          token: ${{ secrets.CODECOV_TOKEN }}
          name: core-mappers-coverage
        continue-on-error: true

      - name: Upload coverage with core-movie flag
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          flags: core-movie
          token: ${{ secrets.CODECOV_TOKEN }}
          name: core-movie-coverage
        continue-on-error: true

      - name: Upload coverage with core-network flag
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          flags: core-network
          token: ${{ secrets.CODECOV_TOKEN }}
          name: core-network-coverage
        continue-on-error: true

      - name: Upload coverage with core-test flag
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          flags: core-test
          token: ${{ secrets.CODECOV_TOKEN }}
          name: core-test-coverage
        continue-on-error: true

      - name: Upload coverage with core-uihelper flag
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          flags: core-uihelper
          token: ${{ secrets.CODECOV_TOKEN }}
          name: core-uihelper-coverage
        continue-on-error: true

      - name: Upload coverage with core-utils flag
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          flags: core-utils
          token: ${{ secrets.CODECOV_TOKEN }}
          name: core-utils-coverage
        continue-on-error: true

      - name: Upload coverage with core-user flag
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          flags: core-user
          token: ${{ secrets.CODECOV_TOKEN }}
          name: core-user-coverage
        continue-on-error: true

      - name: Upload coverage with feature-about flag
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          flags: feature-about
          token: ${{ secrets.CODECOV_TOKEN }}
          name: feature-about-coverage
        continue-on-error: true

      - name: Upload coverage with feature-detail flag
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          flags: feature-detail
          token: ${{ secrets.CODECOV_TOKEN }}
          name: feature-detail-coverage
        continue-on-error: true

      - name: Upload coverage with feature-favorite flag
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          flags: feature-favorite
          token: ${{ secrets.CODECOV_TOKEN }}
          name: feature-favorite-coverage
        continue-on-error: true

      - name: Upload coverage with feature-home flag
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          flags: feature-home
          token: ${{ secrets.CODECOV_TOKEN }}
          name: feature-home-coverage
        continue-on-error: true

      - name: Upload coverage with feature-login flag
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          flags: feature-login
          token: ${{ secrets.CODECOV_TOKEN }}
          name: feature-login-coverage
        continue-on-error: true

      - name: Upload coverage with feature-more flag
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          flags: feature-more
          token: ${{ secrets.CODECOV_TOKEN }}
          name: feature-more-coverage
        continue-on-error: true

      - name: Upload coverage with feature-person flag
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          flags: feature-person
          token: ${{ secrets.CODECOV_TOKEN }}
          name: feature-person-coverage
        continue-on-error: true

      - name: Upload coverage with feature-search flag
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          flags: feature-search
          token: ${{ secrets.CODECOV_TOKEN }}
          name: feature-search-coverage
        continue-on-error: true

      - name: Upload coverage with feature-watchlist flag
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          flags: feature-watchlist
          token: ${{ secrets.CODECOV_TOKEN }}
          name: feature-watchlist-coverage
        continue-on-error: true

      - name: Upload patch coverage reports to Codecov
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@78f372e97e6e2f82dc51b004c5fb646501ee30ae
        with:
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml
          token: ${{ secrets.CODECOV_TOKEN }}

      # https://github.com/codacy/codacy-coverage-reporter-action/commit/55c3b57cb3bb6833c8c1a6614fee4cebb140de2d
      # v1.3.0
      - name: Upload coverage reports to Codacy
        if: steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codacy/codacy-coverage-reporter-action@a38818475bb21847788496e9f0fddaa4e84955ba
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml

      # https://github.com/qltysh/qlty-action/commit/b9133a486505563742d768da29f7951271678c87
      # v1.1.1
      - name: Upload coverage reports to Qlty
        uses: qltysh/qlty-action/coverage@325e718842513d9e19baf91280cab9bc6db6e17b
        with:
          token: ${{ secrets.QLTY_COVERAGE_TOKEN }}
          files: ${{ github.workspace }}/**/build/reports/jacoco/createDebugCombinedCoverageReport/createDebugCombinedCoverageReport.xml

      - name: Install DeepSource CLI
        run: curl https://deepsource.io/cli | sh

      - name: Upload coverage reports to DeepSource
        run: |
          find . -type f -name "createDebugCombinedCoverageReport.xml" | while read filepath; do
            echo "Uploading coverage: $filepath"
            ./bin/deepsource report \
              --analyzer test-coverage \
              --key kotlin \
              --value-file "$filepath"
          done
        env:
          DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}

      # https://github.com/codecov/test-results-action/commit/f2dba722c67b86c6caa034178c6e4d35335f6706
      # v1.1.0
      - name: Upload Test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@47f89e9acb64b76debcd5ea40642d25a4adced9f
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload Test Reports (if needed)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: combined-test-reports
          path: |
            **/build/reports/tests/testDebugUnitTest/
            **/build/reports/androidTests/connected/
